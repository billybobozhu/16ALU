/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  reg testsig;
  
  reg [1:0] M_slow_clk_d, M_slow_clk_q = 1'h0;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  wire [1-1:0] M_alu_overflow;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu16bit_3 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n),
    .overflow(M_alu_overflow)
  );
  
  wire [16-1:0] M_sab_geta;
  wire [16-1:0] M_sab_getb;
  reg [1-1:0] M_sab_clk;
  reg [1-1:0] M_sab_buta;
  reg [1-1:0] M_sab_butb;
  reg [16-1:0] M_sab_switches;
  storage_4 sab (
    .clk(M_sab_clk),
    .buta(M_sab_buta),
    .butb(M_sab_butb),
    .switches(M_sab_switches),
    .geta(M_sab_geta),
    .getb(M_sab_getb)
  );
  
  
  localparam A_state = 2'd0;
  localparam B_state = 2'd1;
  localparam OUT_state = 2'd2;
  
  reg [1:0] M_state_d, M_state_q = A_state;
  
  wire [16-1:0] M_tester_out;
  wire [24-1:0] M_tester_leds;
  autotest_5 tester (
    .clk(M_slow_clk_q[1+0-:1]),
    .rst(rst),
    .mode_switch(testsig),
    .out(M_tester_out),
    .leds(M_tester_leds)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_slow_clk_d = M_slow_clk_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = {3'h0, io_button};
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_seg_values = 16'h0000;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    M_sab_clk = clk;
    M_sab_buta = io_button[3+0-:1];
    M_sab_butb = io_button[4+0-:1];
    M_sab_switches[0+7-:8] = io_dip[0+7-:8];
    M_sab_switches[8+7-:8] = io_dip[8+7-:8];
    testsig = io_dip[16+7+0-:1];
    M_slow_clk_d = M_slow_clk_q + 1'h1;
    
    case (M_state_q)
      A_state: begin
        io_led[0+7-:8] = M_sab_geta[0+7-:8];
        io_led[8+7-:8] = M_sab_geta[8+7-:8];
        if (io_button[1+0-:1]) begin
          M_state_d = OUT_state;
        end else begin
          if (io_button[2+0-:1]) begin
            M_state_d = B_state;
          end
        end
      end
      B_state: begin
        io_led[0+7-:8] = M_sab_getb[0+7-:8];
        io_led[8+7-:8] = M_sab_getb[8+7-:8];
        if (io_button[1+0-:1]) begin
          M_state_d = OUT_state;
        end else begin
          if (io_button[0+0-:1]) begin
            M_state_d = A_state;
          end
        end
      end
      OUT_state: begin
        io_led[0+7-:8] = M_alu_out[0+7-:8];
        io_led[8+7-:8] = M_alu_out[8+7-:8];
        if (io_button[0+0-:1]) begin
          M_state_d = A_state;
        end else begin
          if (io_button[2+0-:1]) begin
            M_state_d = B_state;
          end
        end
        M_seg_values = 16'h0000;
      end
    endcase
    M_alu_a = M_sab_geta;
    M_alu_b = M_sab_getb;
    M_alu_alufn = io_dip[16+0+5-:6];
    io_led[16+0+7-:8] = io_dip[16+0+7-:8];
    if (testsig == 1'h1) begin
      M_seg_values = M_tester_out;
      io_led = M_tester_leds;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_slow_clk_q <= 1'h0;
    end else begin
      M_slow_clk_q <= M_slow_clk_d;
    end
  end
  
endmodule
