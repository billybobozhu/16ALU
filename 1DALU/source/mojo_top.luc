module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {

  sig rst;                  // reset signal
  sig testsig;
  dff slow_clk[2](.clk(clk), .rst(rst));

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;

    //edge_detector edge_detector (#RISE(1), #FALL(0));

    .rst(rst) {
      multi_seven_seg seg;
      //multi_dec_ctr dec_ctr;
      //counter ctr (#SIZE(1), #DIV(24));
    }
  }

  // instantiation of modules
  alu16bit alu; // instantiate the ALU
  storage sab; // instantiate storeab that allows button press to store the value of switches to A or B and access stored value
  fsm state(.clk(clk), .rst(rst)) = {A, B, OUT}; // create 3 states for the display of values on LED, stored value of A, B and OUT

  //instantiate tester16
  autotest tester(.clk(slow_clk.q[1]),
   .rst(rst),
    .mode_switch(testsig));

  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset

    led = c{3b0, io_button};  // connect buttons to LEDs
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port

    //edge_detector.in = ctr.value;
    //dec_ctr.inc = edge_detector.out;
    //seg.values = dec_ctr.digits;
    seg.values = {4d0,4d0,4d0,4d0};

    io_seg = ~seg.seg; // connect segments to the driver
    io_sel = ~seg.sel; // connect digit select to the driver

    // set the hardware connection to the module
    sab.clk = clk; // set clock of sab to clk
    sab.buta = io_button[3]; // set the left button to store the switches value to a
    sab.butb = io_button[4]; // set the right button to store the switches value to b
    sab.switches[7:0] = io_dip[0]; // as the switches are in a set, right set of 8 to the 8 7:LSB value
    sab.switches[15:8] = io_dip[1]; // set the middle set to the MSB:8 values

    //set leftmost switch to change to autotest
    testsig = io_dip[2][7];
    
    slow_clk.d = slow_clk.q + 1;
    
    // Create a state machine that changes state based on the button pressed
    // 3 buttons for 3 states, top(button 0) to display A, bottom(button 2) to display B and middle(button 1) to display output
      case(state.q){
        state.A: // display A
          io_led[0] = sab.geta[7:0]; // get the first 7:LSB values of A and display on right set of 8 LED
          io_led[1] = sab.geta[15:8]; // get the next MSB:8 values of A to display on the middle set of 8 LED
          if(io_button[1]){ // if middle button pressed set the state to OUT
            state.d = state.OUT;
          }
          else if(io_button[2]){ // if bottom button pressed set state to B
            state.d = state.B;
          }
        state.B: // display B
          io_led[0] = sab.getb[7:0]; // get the first 7:LSB values of B and display on right set of 8 LED
          io_led[1] = sab.getb[15:8]; // get the next MSB:8 values of B to display on the middle set of 8 LED
          if(io_button[1]){ // if middle button pressed set the state to OUT
            state.d = state.OUT;
          }
          else if(io_button[0]){ // if top button pressed set state to A
            state.d = state.A;
          }
        state.OUT:
          io_led[0] = alu.out[7:0];   // connect the computed value of output 7:LSB to right set of 8 LED
          io_led[1] = alu.out[15:8];   // connect the computed value of output MSB:8 to middle set of 8 LED
          if(io_button[0]){ // if top button pressed set state to A
            state.d = state.A;
          }
          else if(io_button[2]){ // if bottom button pressed set state to B
            state.d = state.B;
          }
          seg.values = {4d0,4d0,4d0,4d0};
      }
    alu.a = sab.geta; // connect the stored A values to the ALU A
    alu.b = sab.getb; // connect the stored B values to the ALU B
    alu.alufn = io_dip[2][5:0]; // set ALUFN to be the 6 bit of the first set of dip switches

    io_led[2][7:0] = io_dip[2][7:0]; // set left set of io_led to display the alufn code
    
    if (testsig == 1){
      // run tester FSM and outputs the tester FSM output to 7seg, first 2 bits represent operation, next 2 bit represent pass(11) or fail(00)
      seg.values = tester.out;
      io_led = tester.leds;
    }
    }
}

